# IMPORTANT: All unit test files must begin with UT_*

import glob

Import('env')

# ASN1C_INC_DIR = '/opt/asn1c-v72B'
# ASN1C_INC_DIR = '/opt/asn1c-v722'


env.AppendUnique(CPPPATH = ['#/inc/', '#/lib/pcap/inc',
                             '#/lib/asn', '#/lib/boost_1_72_0'])

# lib paths
LIBPATH = ['#/lib', '#/lib/pcap/lib', '#/lib/boost_1_72_0/stage/lib'] 
env.AppendUnique(LIBPATH = LIBPATH)

# compile flags
COMPILE_FLAGS = '-std=c++17 -g -O2 -DBOOST_LOG_DYN_LINK -DBOOST_LOG_USE_NATIVE_SYSLOG -DGEOGRAPHICLIB_EXPORT=1'

env.Append(CXXFLAGS = COMPILE_FLAGS)

LIBS = ['ut', 'pcap_xcode', 'context_db', 'layer_management', 'PCAP', 
        'boost_thread-mt-d-x64', 'pthread', 'boost_system-mt-d-x64',
        'boost_filesystem-mt-d-x64', 'boost_date_time-mt-d-x64', 'boost_regex-mt-d-x64',
        'boost_log_setup-mt-d-x64', 'boost_log-mt-d-x64',  'm',
          'asn1per', 'asn1rt']
env.AppendUnique(LIBS = LIBS)

SOURCES = env.Glob('*.cpp')

OBJECT_FILES = env.Object(SOURCES)

OBJECT_FILES = [str(i) for i in OBJECT_FILES]

MAIN_SOURCES = [i for i in OBJECT_FILES  if not i.startswith('UT_')]

# build the main application now
env.Program(target = "sas",
            source = OBJECT_FILES)

#env.Install('/usr/local/bin', 'iupc')
#DIST_LIBS = env.Glob('#/lib/*')
#env.Install('/usr/local/lib', DIST_LIBS)
#env.Install('/usr/local/', '#/dist/bin')
#env.Install('/usr/local/include', env.Glob('#/dist/include/*'))
#env.Install('/usr/local/lib', env.Glob('#/dist/lib/*'))
#env.Install('/usr/local/sbin', env.Glob('#/dist/sbin/*'))
#env.Install('/usr/local/share', env.Glob('#/dist/share/*'))

#env.Package(NAME = 'sas',
#	    VERSION = 1.0,
#            PACKAGETYPE = 'targz')

# Decider('MD5-timestamp')
Export('env')

# build 3G libs
SConscript('#/lib/pcap/src/SConscript', duplicate = 0, exports = 'env')

# build LCE lib
#SConscript('LCE/SConscript', duplicate = 0, exports = 'env')

# build context_db lib
SConscript('context_db/SConscript', duplicate = 0, exports = 'env')

# build pcap encode decode  lib
SConscript('pcap_xcode/SConscript', duplicate = 0, exports = 'env')


# build layer_management lib
SConscript('layer_management/SConscript', duplicate = 0, exports = 'env')

# build UT lib
SConscript('ut/SConscript', duplicate = 0, exports = 'env')

# build ConfigGenerator
#SConscript('ConfigGenerator/SConscript', duplicate = 0, exports = 'env')

