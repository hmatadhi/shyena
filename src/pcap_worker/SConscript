# IMPORTANT: All unit test files must begin with UT_*

import glob

Import('env')

# ASN1C_INC_DIR = '/opt/asn1c-v72B'
# ASN1C_INC_DIR = '/opt/asn1c-v722'

# ASN1C_LIB_DIR = '/opt/asn1c-v72B/cpp/lib' 
# ASN1C_LIB_DIR = '/opt/asn1c-v722/cpp/lib' 

# include header paths
# env.AppendUnique(CPPPATH = ['#/inc/', ASN1C_INC_DIR])
env.AppendUnique(CPPPATH = ['#/inc/', '#/lib/pcap/inc', '#/lib/asn', '#/lib/boost_1_72_0'])

# lib paths
# LIBPATH = [ASN1C_LIB_DIR, '#/lib'] 
LIBPATH = ['#/lib', '#/lib/pcap/lib', '#/lib/boost_1_72_0/stage/lib'] 
env.AppendUnique(LIBPATH = LIBPATH)

# compile flags
COMPILE_FLAGS = '-std=c++11 -g -O2 -DBOOST_LOG_DYN_LINK -DBOOST_LOG_USE_NATIVE_SYSLOG -DGEOGRAPHICLIB_EXPORT=1'

env.Append(CXXFLAGS = COMPILE_FLAGS)

# required libs
#LIBS = ['pcap', 'boost_thread-mt', 'pthread', 'boost_system-mt',
#        'boost_filesystem-mt', 'boost_date_time-mt', 'boost_regex-mt',
#        'boost_log_setup-mt', 'boost_log-mt', 'sctp', 'config++', 'm',
#        'LCE', 'Geographic', 'MessageHelper', 'LCS-AP', 'LPPa',
#        'asn1per', 'asn1rt']
LIBS = ['PCAP', 'asn1per', 'asn1rt']


env.AppendUnique(LIBS = LIBS)

SOURCES = env.Glob('*.cpp')

OBJECT_FILES = env.Object(SOURCES)

OBJECT_FILES = [str(i) for i in OBJECT_FILES]

MAIN_SOURCES = [i for i in OBJECT_FILES  if not i.startswith('UT_')]

#SIM_SOURCES = [i for i in MAIN_SOURCES if not i.startswith('main.o')]
#SIM_SOURCES += ['UT_Simulator.o']

# build unit test programs here

# pcap unit test
#env.Program(target = 'UT_PcapLogger',
#            source = ['UT_PcapLogger.o', 'PcapLogger.o', 'Logger.o'])
#
## sctp unit test
#env.Program(target = 'UT_SctpConnection',
#            source = ['UT_SctpConnection.o', 'Logger.o', 'Utilities.o',
#                      'SctpNotificationListener.o', 'LteMessageReceiver.o',
#                      'SctpConnection.o', 'LteMessage.o'])
#
## lte message queue unit test
#env.Program(target = 'UT_LteMessageQueue',
#            source = ['UT_LteMessageQueue.o', 'Logger.o',
#                      'LteMessage.o',  'LteMessageQueue.o'])
#
## lte config unit test
#env.Program(target = 'UT_ConfigInterface',
#            source = ['UT_ConfigInterface.o', 'ConfigInterface.o',
#                      'ConfigReader.o', 'Utilities.o'])
#
## network db unit test
#env.Program(target = 'UT_NetworkBuilder',
#            source = ['UT_NetworkBuilder.o', 'NetworkDbBuilder.o',
#                      'Logger.o', 'Utilities.o'])
#
## task scheduler unit test
#env.Program(target = 'UT_TaskScheduler',
#            source = ['UT_TaskScheduler.o', 'TaskScheduler.o',
#                      'Logger.o'])
#
## message helpers
#env.Program(target = 'UT_LteMessageHelpers',
#            source = ['UT_LteMessageHelpers', 'LteMessage.o',
#                      'Logger.o', 'Utilities.o'])
#
## LCE unit test
#env.Program(target = 'UT_LCE',
#            source = ['UT_LCE.o', 'NetworkDbBuilder.o',
#                      'Logger.o', 'Utilities.o'])
#
## Simulator
#env.Program(target = 'UT_Simulator',
#            source = SIM_SOURCES)
#
# build the main application now
env.Program(target = "iupc",
            source = MAIN_SOURCES)

#env.Install('/usr/local/bin', 'iupc')
#DIST_LIBS = env.Glob('#/lib/*')
#env.Install('/usr/local/lib', DIST_LIBS)


#env.Install('/usr/local/', '#/dist/bin')
#env.Install('/usr/local/include', env.Glob('#/dist/include/*'))
#env.Install('/usr/local/lib', env.Glob('#/dist/lib/*'))
#env.Install('/usr/local/sbin', env.Glob('#/dist/sbin/*'))
#env.Install('/usr/local/share', env.Glob('#/dist/share/*'))

#env.Package(NAME = 'iupc',
#	    VERSION = 1.0,
#            PACKAGETYPE = 'targz')

# Decider('MD5-timestamp')
Export('env')

# build 3G libs
SConscript('#/lib/pcap/src/SConscript', duplicate = 0, exports = 'env')

# build LCE lib
#SConscript('LCE/SConscript', duplicate = 0, exports = 'env')

# build message helpers lib
#SConscript('MessageHelpers/SConscript', duplicate = 0, exports = 'env')

# build ConfigGenerator
#SConscript('ConfigGenerator/SConscript', duplicate = 0, exports = 'env')

