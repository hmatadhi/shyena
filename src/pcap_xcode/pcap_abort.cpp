#if 0
/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.B, Date: 10-Feb-2018.
 */
#include "PCAP-PDU-DescriptionsTable.h"
#include "PCAP-PDU-ContentsTable.h"
#include "PCAP-IEsTable.h"
#include "rtxsrc/rtxCommon.h"

namespace pcap {

   /*
    * Randomly generated test file: seed = 1518301811
    */
   ASN1T_PCAP_PDU* ASN1C_PCAP_PDU::genTestInstance(OSCTXT *pctxt, OSBOOL free)

   {
      if (0 == pctxt) pctxt = getCtxtPtr();
      ASN1T_PCAP_PDU* pvalue = (ASN1T_PCAP_PDU*)&msgData;
      asn1Init_PCAP_PDU (pvalue, free, pctxt);

      pvalue->t =  1;
      pvalue->u.initiatingMessage = rtxMemAllocTypeZ (pctxt, ASN1T_InitiatingMessage);

      pvalue->u.initiatingMessage->procedureCode = ASN1V_id_Abort;

      pvalue->u.initiatingMessage->criticality = Criticality::ignore;

      pvalue->u.initiatingMessage->transactionID.t =  2;
      pvalue->u.initiatingMessage->transactionID.u.longTID = 0001;

     
     //ASN1T_PositionCalculationResponse* pdata1 = rtxMemAllocTypeZ (pctxt, ASN1T_PositionCalculationResponse);
     ASN1T_Abort* AbortMsg = rtxMemAllocTypeZ(pctxt, ASN1T_Abort)

     AbortMsg->m.protocolExtensionsPresent = 0;

     // Add protocol IEs
    ASN1C_Abort_protocolIEs ProtocolIEs(pctxt,AbortMsg->protocolIEs);

    ProtocolIEs.init();

    // Allocate element
    ASN1T_Abort_protocolIEs_element *pElement = ProtocolIEs.NewElement();
    
    if(NULL == pElement)
    {
       LogError << "New Element Creation Failed for Locatin Abort Request: CorrelationID";
       return NULL;
    }

    // Initialize element
    if (asn1Init_Abort_protocolIEs(pElement,TRUE,pctxt)                                                            
    {
        LogError << "initialization of location abort req proto ies element failed";
        return NULL;
    }
    
    pElement->id = ASN1V_id_Cause;
    pElement->criticality == Criticality::ignore;

    //Creating Cause IE
    ASN1T_Cause *pCause = (ASN1T_Cause*)rtxMemAllocZ(pctxt, sizeof(ASN1T_Cause));

    if(NULL == pCause)
    {
        LogError << "Memory allocation failed for AABORT_CAUSE";
        return NULL
    }
    
    pCause->t = T_Cause_protocol;
    pCause->u.protocol = ASN1T_CauseProtocol_ENUMTAB[5];

    pElement->value.decoded = pCause;

    ProtocolIEs.Append(pElement);
     
    
    pvalue->u.initiatingMessage->value.decoded = (void*)AbortMsg;


#if 0
         /* zero elements */

         pdata1->m.protocolExtensionsPresent = 1;
         {
            ASN1C_PositionCalculationResponse_protocolExtensions llist5 (*this, pdata1->protocolExtensions);
            llist5.init ();
            ASN1T_PositionCalculationResponse_protocolExtensions_element* pdata;

            pdata = llist5.NewElement ();

            pdata->id = ASN1V_id_AccuracyFulfilmentIndicator;

            pdata->criticality = Criticality::ignore;

            {
               ASN1T_AccuracyFulfilmentIndicator* pdata1 = rtxMemAllocTypeZ (pctxt, ASN1T_AccuracyFulfilmentIndicator);
               pdata->extensionValue.decoded = (void*)pdata1;
               *pdata1 = AccuracyFulfilmentIndicator::requested_Accuracy_Fulfilled;
            }

            llist5.Append (pdata);

         }
      }
#endif
      return (pvalue);
   }

} ;
#endif